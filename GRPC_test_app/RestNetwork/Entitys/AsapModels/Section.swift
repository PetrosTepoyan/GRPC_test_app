//
// Section.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation


public struct Section: Codable {
    public var id: Int?
    public var name: String
    public var codeName: String?
    public var userId: Int?
    public var categories: [CategoryGrade]?
    public var isSystem: Bool?
    public var isCurrent: Bool?
    public var visible: Bool?
    public var sortOrder: Int?
    public var currentCategory: Int?
    public var createdAt: String?
    public var updatedAt: String?
    
    public init(id: Int? = nil, name: String, codeName: String? = nil, userId: Int? = nil, categories: [CategoryGrade]? = nil, isSystem: Bool? = nil, isCurrent: Bool? = nil, visible: Bool? = nil,
                sortOrder: Int? = nil, currentCategory: Int? = nil, createdAt: String? = nil, updatedAt: String? = nil) {
        self.id = id
        self.name = name
        self.codeName = codeName
        self.userId = userId
        self.categories = categories
        self.isSystem = isSystem
        self.isCurrent = isCurrent
        self.visible = visible
        self.sortOrder = sortOrder
        self.currentCategory = currentCategory
        self.createdAt = createdAt
        self.updatedAt = updatedAt
    }
    
    public enum CodingKeys: String, CodingKey { 
        case id = "id"
        case name
        case codeName = "code_name"
        case userId = "user_id"
        case categories
        case isSystem = "is_system"
        case isCurrent = "is_current"
        case visible
        case sortOrder = "sort_order"
        case currentCategory = "current_category"
        case createdAt = "created_at"
        case updatedAt = "updated_at"
    }
    
    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)
        id = try container.decodeIfPresent(Int.self, forKey: .id)
        name = try container.decode(String.self, forKey: .name)
        codeName = try container.decodeIfPresent(String.self, forKey: .codeName)
        userId = try container.decodeIfPresent(Int.self, forKey: .userId)
        categories = try container.decodeIfPresent([CategoryGrade].self, forKey: .categories)
        isSystem = try container.decodeIfPresent(Bool.self, forKey: .isSystem)
        isCurrent = try container.decodeIfPresent(Bool.self, forKey: .isCurrent)
        visible = try container.decodeIfPresent(Bool.self, forKey: .visible)
        sortOrder = try container.decodeIfPresent(Int.self, forKey: .sortOrder)
        currentCategory = try container.decodeIfPresent(Int.self, forKey: .currentCategory)
        createdAt = try container.decodeIfPresent(String.self, forKey: .createdAt)
        updatedAt = try container.decodeIfPresent(String.self, forKey: .updatedAt)
    }
    
    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(id, forKey: .id)
        try container.encodeIfPresent(name, forKey: .name)
        try container.encodeIfPresent(codeName, forKey: .codeName)
        try container.encodeIfPresent(userId, forKey: .userId)
        try container.encodeIfPresent(categories, forKey: .categories)
        try container.encodeIfPresent(isSystem, forKey: .isSystem)
        try container.encodeIfPresent(isCurrent, forKey: .isCurrent)
        try container.encodeIfPresent(visible, forKey: .visible)
        try container.encodeIfPresent(sortOrder, forKey: .sortOrder)
        try container.encodeIfPresent(currentCategory, forKey: .currentCategory)
        try container.encodeIfPresent(createdAt, forKey: .createdAt)
        try container.encodeIfPresent(updatedAt, forKey: .updatedAt)
    }
}
