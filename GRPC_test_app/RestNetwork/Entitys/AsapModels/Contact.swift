//
// Contact.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation


public struct Contact: Codable {
    public var id: Int?
    public var name: String?
    public var ownerProfileID: Int
    public var peerProfileID: Int
    public var type: Int
    public var categoryID: Int
    public var createdAt: String?
    public var updatedAt: String?
    public var deletedAt: String?
    public var isBlocked: Bool
    
    public init(id: Int? = nil, name: String? = nil, ownerProfileID: Int, peerProfileID: Int, type: Int, categoryID: Int, createdAt: String? = nil, updatedAt: String? = nil, deletedAt: String? = nil, isBlocked: Bool = false) {
        self.id = id
        self.name = name
        self.ownerProfileID = ownerProfileID
        self.peerProfileID = peerProfileID
        self.type = type
        self.categoryID = categoryID
        self.createdAt = createdAt
        self.updatedAt = updatedAt
        self.deletedAt = deletedAt
        self.isBlocked = isBlocked
    }
    
    public enum CodingKeys: String, CodingKey { 
        case id = "id"
        case name = "Name"
        case ownerProfileID = "OwnerProfileID"
        case peerProfileID = "PeerProfileID"
        case type = "Type"
        case categoryID = "CategoryID"
        case createdAt = "CreatedAt"
        case updatedAt = "UpdatedAt"
        case deletedAt = "DeletedAt"
        case isBlocked = "isBlocked"
    }
    
    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)
        id = try container.decodeIfPresent(Int.self, forKey: .id)
        name = try container.decodeIfPresent(String.self, forKey: .name)
        ownerProfileID = try container.decode(Int.self, forKey: .ownerProfileID)
        peerProfileID = try container.decode(Int.self, forKey: .peerProfileID)
        type = try container.decode(Int.self, forKey: .type)
        categoryID = try container.decode(Int.self, forKey: .categoryID)
        createdAt = try container.decodeIfPresent(String.self, forKey: .createdAt)
        updatedAt = try container.decodeIfPresent(String.self, forKey: .updatedAt)
        deletedAt = try container.decodeIfPresent(String.self, forKey: .deletedAt)
        isBlocked = try container.decode(Bool.self, forKey: .isBlocked)
    }
    
    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(id, forKey: .id)
        try container.encodeIfPresent(name, forKey: .name)
        try container.encodeIfPresent(ownerProfileID, forKey: .ownerProfileID)
        try container.encodeIfPresent(peerProfileID, forKey: .peerProfileID)
        try container.encodeIfPresent(type, forKey: .type)
        try container.encodeIfPresent(categoryID, forKey: .categoryID)
        try container.encodeIfPresent(createdAt, forKey: .createdAt)
        try container.encodeIfPresent(updatedAt, forKey: .updatedAt)
        try container.encodeIfPresent(deletedAt, forKey: .deletedAt)
        try container.encodeIfPresent(isBlocked, forKey: .isBlocked)
    }

}
