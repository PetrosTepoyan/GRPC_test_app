//
// Chat.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation


public struct Chat: Codable {
    public var id: Int?
    public var owners: [Member]
    public var members: [Member]
    public var permissions: [Permission]
    public var avatar: String?
    public var name: String
    public var description: String
    public var type: String?
    public var tags: [String]?
    public var passcode: String?
    public var isAnonymous: Bool?
    public var isMuted: Bool?
    public var isHidden: Bool?
    public var isSearchable: Bool?
    public var isOpenedHistory: Bool?
    public var active: Bool?
    public var createdAt: String?
    public var updatedAt: String?
    public var sortOrder: Int?
    public var categories: [Int]
    
    public init(id: Int? = nil, owners: [Member], members: [Member], permissions: [Permission], avatar: String? = nil, name: String, description: String, type: String? = nil, tags: [String]? = nil, passcode: String? = nil, isAnonymous: Bool? = nil, isMuted: Bool? = nil, isHidden: Bool? = nil, isSearchable: Bool? = nil, isOpenedHistory: Bool? = nil, active: Bool? = nil, createdAt: String? = nil, updatedAt: String? = nil, deletedAt: String? = nil, sortOrder: Int? = nil, categories: [Int]) {
        self.id = id
        self.owners = owners
        self.members = members
        self.permissions = permissions
        self.avatar = avatar
        self.name = name
        self.description = description
        self.type = type
        self.tags = tags
        self.passcode = passcode
        self.isAnonymous = isAnonymous
        self.isMuted = isMuted
        self.isHidden = isHidden
        self.isSearchable = isSearchable
        self.isOpenedHistory = isOpenedHistory
        self.active = active
        self.createdAt = createdAt
        self.updatedAt = updatedAt
        self.sortOrder = sortOrder
        self.categories = categories
        //self.deletedAt = deletedAt
    }
    
    public enum CodingKeys: String, CodingKey { 
        case id = "id"
        case owners
        case members
        case permissions
        case avatar
        case name
        case description = "description"
        case type
        case tags
        case passcode
        case isAnonymous = "is_anonymous"
        case isMuted = "is_muted"
        case isHidden = "is_hidden"
        case isSearchable = "is_searchable"
        case isOpenedHistory = "is_opened_history"
        case active
        case createdAt = "created_at"
        case updatedAt = "updated_at"
        //case deletedAt = "deleted_at"
        case sortOrder = "sort_order"
        case categories
    }
    
    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)
        id = try container.decodeIfPresent(Int.self, forKey: .id)
        owners = try container.decode([Member].self, forKey: .owners)
        members = try container.decode([Member].self, forKey: .members)
        permissions = try container.decode([Permission].self, forKey: .permissions)
        avatar = try container.decodeIfPresent(String.self, forKey: .avatar)
        name = try container.decode(String.self, forKey: .name)
        description = try container.decode(String.self, forKey: .description)
        type = try container.decodeIfPresent(String.self, forKey: .type)
        tags = try container.decodeIfPresent([String].self, forKey: .tags)
        passcode = try container.decodeIfPresent(String.self, forKey: .passcode)
        isAnonymous = try container.decodeIfPresent(Bool.self, forKey: .isAnonymous)
        isMuted = try container.decodeIfPresent(Bool.self, forKey: .isMuted)
        isHidden = try container.decodeIfPresent(Bool.self, forKey: .isHidden)
        isSearchable = try container.decodeIfPresent(Bool.self, forKey: .isSearchable)
        isOpenedHistory = try container.decodeIfPresent(Bool.self, forKey: .isOpenedHistory)
        active = try container.decodeIfPresent(Bool.self, forKey: .active)
        createdAt = try container.decodeIfPresent(String.self, forKey: .createdAt)
        updatedAt = try container.decodeIfPresent(String.self, forKey: .updatedAt)
        sortOrder = try container.decodeIfPresent(Int.self, forKey: .sortOrder)
        categories = try container.decode([Int].self, forKey: .categories)
    }
    
    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(id, forKey: .id)
        try container.encodeIfPresent(owners, forKey: .owners)
        try container.encodeIfPresent(members, forKey: .members)
        try container.encodeIfPresent(permissions, forKey: .permissions)
        try container.encodeIfPresent(avatar, forKey: .avatar)
        try container.encodeIfPresent(name, forKey: .name)
        try container.encodeIfPresent(description, forKey: .description)
        try container.encodeIfPresent(type, forKey: .type)
        try container.encodeIfPresent(tags, forKey: .tags)
        try container.encodeIfPresent(passcode, forKey: .passcode)
        try container.encodeIfPresent(isAnonymous, forKey: .isAnonymous)
        try container.encodeIfPresent(isMuted, forKey: .isMuted)
        try container.encodeIfPresent(isHidden, forKey: .isHidden)
        try container.encodeIfPresent(isSearchable, forKey: .isSearchable)
        try container.encodeIfPresent(isOpenedHistory, forKey: .isOpenedHistory)
        try container.encodeIfPresent(active, forKey: .active)
        try container.encodeIfPresent(createdAt, forKey: .createdAt)
        try container.encodeIfPresent(updatedAt, forKey: .updatedAt)
        try container.encodeIfPresent(sortOrder, forKey: .sortOrder)
        try container.encodeIfPresent(categories, forKey: .categories)
    }
}
